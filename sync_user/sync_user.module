<?php
/**
 * @file
 * Synchronize local users from another Drupal site that exposes user
 * information with PuSH user module.
 *
 * @todo Add authentication with url_sign module.
 *
 * - Don't require a user to sign a URL.
 * - Add shared private key between OP and RPs.
 * - Extend FeedsPubSubFetcher in sync_user and sign every request URL with
 *   private key.
 * - Verify signature in push_user before returning the feed.
 * - Add nonce and random token to signed URL?
 */

include_once('sync_user.features.inc');

/**
 * Implementation of hook_menu().
 */
function sync_user_menu() {
  $items = array();
  $items['admin/user/sync'] = array(
    'title' => 'Synchronize users',
    'description' => 'Synchronize users from another Drupal site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sync_user_form', 'administer users'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_feeds_plugins().
 */
function sync_user_feeds_plugins() {
  $path = drupal_get_path('module', 'sync_user').'/plugins';
  $info = array();
  $info['SyncUserParser'] = array(
    'name' => 'Sync User parser',
	    'description' => 'Parses user account information from feeds provided by the PuSH User module.',
	    'handler' => array(
	      'parent' => 'FeedsParser',
	      'class' => 'SyncUserParser',
	      'file' => 'SyncUserParser.inc',
	      'path' => $path,
	    ),
	  );
  $info['SyncUserDeleteProcessor'] = array(
    'name' => 'Sync User Delete processor',
    'description' => 'Deletes user account information from feeds parsed using FeedsAtomRDFParser',
    'handler' => array(
      'parent' => 'FeedsUserProcessor',
      'class' => 'SyncUserDeleteProcessor',
      'file' => 'SyncUserDeleteProcessor.inc',
      'path' => $path,
    ),
  );
      
	return $info;
}

/**
 * Implementation of hook_user().
 *
 * Subscribe/unsubscribe users when they register.
 */
function sync_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      if (isset($edit['auth_openid'])) {
        sync_user_subscribe($account->uid, sync_user_subscription_url($edit['auth_openid']));
      }
      break;
    case 'delete':
      sync_user_unsubscribe($account->uid);
      break;
    // This hook makes sure, on user login, that if the user has an openid, it is also subscribed to the hub's user feed and profile
    case 'login':
      sync_user_on_login($account->uid);
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function sync_user_form_alter(&$form, $form_state, $form_id) {
  // Do not allow users to modify their email or password in a relying party: this must be done on the hub
  if ($form_id == 'user_profile_form' && !user_access('administer users')) {
    $provider = variable_get('openid_sso_provider', array('name' => 'Hub', 'url' => 'http://example.com/'));
    $form['account']['message']['#value'] = t('@site is a partner of the <a href="@hub_url">@hub</a>. If you want to edit your account information (such as email and password), you must do it on the <a href="@hub_url">@hub</a>.',
    array(
      '@site' => variable_get('site_name', 'Drupal'),
      '@hub' => $provider['name'],
      '@hub_url' => $provider['url']
    ));
    $form['account']['mail']['#disabled'] = TRUE;
    $form['account']['mail']['#value'] = $form['account']['mail']['#default_value'];
    unset($form['account']['pass']);
  }
}


/**
 * Settings form.
 */
function sync_user_form() {
  $form = array();
  $form['sync_user_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Provider host URL'),
    '#description' => t('Host URL to synchronize users from. Point to the root of a trusted Drupal site with PuSH user module installed. URL must have a trailing slash.'),
    '#default_value' => sync_user_host(),
  );
  if (module_exists('openid_sso')) {
    $form['sync_user_host']['#disabled'] = TRUE;
    $form['sync_user_host']['#description'] .= ' '. l(t('To change this value, change the OpenID Provider on the OpenID Simple Sign-On page.'), 'admin/settings/openid-sso');
  }
  $enabled_importers_ids = feeds_enabled_importers();
  $enabled_importers = array();
  foreach ($enabled_importers_ids as $enabled_importers_id) {
    $enabled_importers[$enabled_importers_id] = $enabled_importers_id;
  }
  $form['sync_user_user_feed_importer'] = array(
    '#type' => 'select',
    '#options' => $enabled_importers,
    '#title' => t('User feed importer'),
    '#description' => t('User feed importer being used.'),
    '#default_value' => variable_get('sync_user_user_feed_importer', 'user_updates')
  );
  $form['sync_user_user_feed'] = array(
    '#type' => 'textfield',
    '#title' => t('User feed URL'),
    '#description' => t('User feed URL WITHOUT host URL. Must NOT have a trailing slash'),
    '#default_value' => variable_get('sync_user_user_feed', 'user/feed')
  );
  $form['sync_user_user_deletes_feed_importer'] = array(
    '#type' => 'select',
    '#options' => $enabled_importers,
    '#title' => t('User delete feed importer'),
    '#description' => t('User delete feed importer being used.'),
    '#default_value' => variable_get('sync_user_user_deletes_feed_importer', 'user_deletes')
  );
  $form['sync_user_user_deletes_feed'] = array(
    '#type' => 'textfield',
    '#title' => t('User delete feed URL'),
    '#description' => t('User delete feed URL WITHOUT host URL. Must NOT have a trailing slash.'),
    '#default_value' => variable_get('sync_user_user_deletes_feed', 'sync/users/delete')
  );
  if (module_exists('content_profile')) {
    $form['sync_user_profile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Synchronize content profile'),
      '#description' => t('Whether to synchronize content profile'),
      '#default_value' => variable_get('sync_user_profile', FALSE)
    );
    $form['sync_user_profile_feed_importer'] = array(
      '#type' => 'select',
      '#options' => $enabled_importers,
      '#title' => t('Profile feed importer'),
      '#description' => t('Profile feed importer being used.'),
      '#default_value' => variable_get('sync_user_profile_feed_importer', 'users')
    );
    $form['sync_user_profile_feed'] = array(
      '#type' => 'textfield',
      '#title' => t('Profile feed URL'),
      '#description' => t('Profile feed URL WITHOUT host URL. Must NOT have a trailing slash'),
      '#default_value' => variable_get('sync_user_profile_feed', 'sync/profiles')
    );
  }
  return system_settings_form($form);
}

/**
 * Construct a subscription URL.
 */
function sync_user_subscription_url($openid) {
  $url = sync_user_host();
  $url .= variable_get('sync_user_user_feed', 'user/feed');
  $url .= '?openid='. urlencode($openid);
  return $url;
}

/**
 * Construct profile feed URL
 */
function sync_user_profile_url($uid) {
  $url = sync_user_host();
  $url .= variable_get('sync_user_profile_feed', 'sync/profiles');
  $url .= '/'.$uid;
  return $url;
}

/**
 * Construct user delete URL
 */
function sync_user_delete_url($uid) {
  $url = sync_user_host();
  $url .= variable_get('sync_user_user_deletes_feed', 'sync/users/delete');
  $url .= '?uid='.$uid;
  return $url;
}

/**
 * Get the sync user host. If OpenID SSO module is enabled, uses its settings.
 */
function sync_user_host() {
  if (module_exists('openid_sso')) {
    $provider = variable_get('openid_sso_provider', array());
    return $provider['url'];
  }
  return variable_get('sync_user_host', 'http://example.com/');
}

/**
 * Retrieve the OpenID for a given user, assume only 1.
 *
 * @todo: resolve the one OpenID per user restriction.
 */
function sync_user_openid($uid) {
  return db_result(db_query("SELECT authname FROM {authmap} WHERE uid = %d AND module = 'openid'", $uid));
}

/**
 * Retrieve the uid for a given openid, assume only 1
 */
function sync_user_uid($openid) {
  return db_result(db_query("SELECT uid FROM {authmap} WHERE authname = '%s' AND module = 'openid'", $openid));
}

/**
 * Hook called on user login
 */
function sync_user_on_login($uid) {
  $openid = sync_user_openid($uid);
  if ($openid) {
    $sync_url = sync_user_subscription_url($openid);
    $result = db_query("SELECT COUNT(*) AS number FROM {feeds_push_subscriptions} WHERE topic = '%s'", $sync_url);
    $row = $result->fetch_object();
    if ($row->number == 0) {
      sync_user_subscribe($uid, sync_user_subscription_url($openid));
    }
  }
}

/**
 * Subscribe a user.
 */
function sync_user_subscribe($uid, $url) {

  if (valid_url($url)) {
    $user_updates = variable_get('sync_user_user_feed_importer', 'user_updates');
    $source = feeds_source($user_updates, $uid);
    $source->addConfig(array(
      'KeyAuthHTTPFetcher' => array(
        'source' => $url,
      ),
    ));
    $source->save();
    
    // Determine uid on hub
    $decoded_url = urldecode($url);
    $url_array = parse_url($decoded_url);
    $query = $url_array['query'];
    parse_str($query);
    preg_match('/user\/(\d*?)\/identity/', $openid, $matches);
    $hub_uid = $matches[1];
    
    // Subscribing to delete feed
    $user_deletes = variable_get('sync_user_user_deletes_feed_importer', 'user_deletes');
    $source = feeds_source($user_deletes, $uid);
    $source->addConfig(array(
      'KeyAuthHTTPFetcher' => array(
        'source' => sync_user_delete_url($hub_uid)
      )
    ));
    $source->save();
    
    if (variable_get('sync_user_profile', FALSE)) {
      
      // Subscribe to profile feed
      $profile_importer = variable_get('sync_user_profile_feed_importer', 'users');
      $psource = feeds_source($profile_importer, $uid);
      $psource->addConfig(array(
        'KeyAuthHTTPFetcher' => array(
          'source' => sync_user_profile_url($hub_uid)
        ),
        'SyncNodesProcessor' => array(
          'author' => $uid
        )
      ));
      $psource->save();
      
      // Import user profile
      $psource->import();
    }
  }
}

/**
 * Unsubscribe a user.
 */
function sync_user_unsubscribe($uid) {
  $user_importer = variable_get('sync_user_user_feed_importer', 'user_updates');
  $source = feeds_source($user_importer, $uid);
  $importer = feeds_importer($user_importer);
  $fetcher = $importer->fetcher;
  $fetcher->unsubscribe($source);
  $source->delete();
  
  if (variable_get('sync_user_profile', FALSE)) {
    $profile_importer = variable_get('sync_user_profile_feed_importer', 'users');
    $psource = feeds_source($profile_importer, $uid);
    $pimporter = feeds_importer($profile_importer);
    $pfetcher = $pimporter->fetcher;
    $pfetcher->unsubscribe($psource);
    $psource->delete();
  }
}
