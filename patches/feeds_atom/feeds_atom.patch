? feeds_atom.patch
Index: feeds_atom.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/feeds_atom/feeds_atom.module,v
retrieving revision 1.1.2.3
diff -u -p -r1.1.2.3 feeds_atom.module
--- feeds_atom.module	3 Jan 2011 23:05:49 -0000	1.1.2.3
+++ feeds_atom.module	3 Feb 2011 10:42:09 -0000
@@ -1,16 +1,7 @@
 <?php
-// $Id: feeds_atom.module,v 1.1.2.3 2011/01/03 23:05:49 hefox Exp $
-
-/**
- * @file
- * Contains the main functionality for feeds_atom.
- */
 
 define('FEEDS_ATOM_TOMBSTONE_NAMESPACE', 'http://purl.org/atompub/tombstones/1.0');
 
-/**
- * Implementation of hook_ctools_plugin_api().
- */
 function feeds_atom_ctools_plugin_api($owner, $api) {
   if ($owner == 'feeds' && $api == 'plugins') {
     return array('version' => 1);
@@ -18,9 +9,57 @@ function feeds_atom_ctools_plugin_api($o
 }
 
 /**
- * Implementation of hook_feeds_plugins().
- */
+* Implementation of hook_feeds_after_parse().
+*
+* This is needed for feeds_tamper. It allows feeds_tamper to execute its plugins on a
+* feeds_atom feed importer.
+*/
+function feeds_atom_feeds_after_parse(FeedsImporter $importer, FeedsSource $source) {
+  if (module_exists('feeds_tamper')) {
+    $instances = feeds_tamper_load_by_importer($importer->id);
+    if (empty($instances)) {
+      return;
+    }
+    foreach ($source->batch->items as $item_key => &$item) {
+      foreach ($instances as $element_key => $instances_) {
+        foreach ($instances_ as $instance) {
+          $plugin = feeds_tamper_get_plugin($instance->plugin_id);
+
+          if (is_array($item['rdf'][$element_key]) && $plugin['multi'] == 'loop') {
+            foreach ($item['rdf'][$element_key] as &$i) {
+              $plugin['callback']($source, $item_key, $element_key, $i, $instance->settings);
+            }
+          }
+          
+          else if (is_array($item['rdf'][$element_key]) && $plugin['multi'] == 'direct') {
+            $plugin['callback']($source, $item_key, $element_key, $item['rdf'][$element_key], $instance->settings);
+          }
+          
+          else if (!is_array($item['rdf'][$element_key]) && $plugin['single'] != 'skip') {
+            $plugin['callback']($source, $item_key, $element_key, $item['rdf'][$element_key], $instance->settings);
+          }
+          
+          else if (is_array($item[$element_key]) && $plugin['multi'] == 'loop') {
+            foreach ($item[$element_key] as &$i) {
+              $plugin['callback']($source, $item_key, $element_key, $i, $instance->settings);
+            }
+          }
+
+          else if (is_array($item[$element_key]) && $plugin['multi'] == 'direct') {
+            $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
+          }
+
+          else if (!is_array($item[$element_key]) && $plugin['single'] != 'skip') {
+            $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
+          }
+        }
+      }
+    }
+  }
+}
+
 function feeds_atom_feeds_plugins() {
+
   $path = drupal_get_path('module', 'feeds_atom') .'/plugins';
 
   $info['FeedsAtomRDFParser'] = array(
@@ -33,6 +72,17 @@ function feeds_atom_feeds_plugins() {
       'path' => $path
     )
   );
+  
+  $info['FeedsAtomRDFCustomParser'] = array(
+    'name' => 'FeedsAtomRDF Custom parser',
+    'description' => 'Parses data in Atom RDF format and allows you to define your own mapping.',
+    'handler' => array(
+      'parent' => 'FeedsParser',
+      'class' => 'FeedsAtomRDFCustomParser',
+      'file' => 'FeedsAtomRDFCustomParser.inc',
+      'path' => $path
+    )
+  );
 
   $info['FeedsAtomRDFProcessor'] = array(
     'name' => 'FeedsAtomRDF Processing Stage',
@@ -75,43 +125,27 @@ function taxonomy_feeds_atom_rdf_map_alt
   // Process the term data.
   foreach ($source_item['rdf']['taxonomy'] as $source_term) {
     // Add new terms if they don't exist
-    $vid = NULL;
-    $tid = NULL;
-
-    // Find the vocabulary.
-    if (!empty($source_term['vocabulary'])) {
-      // Features intergration: Features stores vocabulary machine name's in
-      // module key prepended with features_
-      if (module_exists('features')) {
-        $machine_name = !empty($source_term['machine']) ? $source_term['machine'] : $source_term['vocabulary'];
-        // Add in features_ if doesn't exist
-        if (strpos($machine_name, 'features_') !== 0) {
-          $machine_name = 'features_' . $machine_name;
-        }
-        $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", strtolower($machine_name)));
-      }
-      // Fallback to name matching if vid not found above.
-      if (empty($vid)) {
-        $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE lower(name) = '%s'", strtolower($source_term['vocabulary'])));
-      }
+    $term = db_fetch_object(db_query("SELECT * FROM {term_data} WHERE name = '%s'", $source_term['title']));
+    if ($term) {
+      $tid = $term->tid;
     }
-
-    // See if the term already exists
-    foreach (taxonomy_get_term_by_name($source_term['title']) as $term) {
-      // if VID was not found but name matches or vid is term's vocabulary.
-      if (empty($vid) || $vid == $term->vid) {
-        $tid = $term->tid;
+    else {
+      $vocabulary = db_fetch_object(db_query("SELECT * FROM {vocabulary} WHERE name = '%s'", $source_term['vocabulary']));
+      if (!empty($vocabulary->vid)) {
+        // Create the new term.
+        $new_term = array(
+          'vid' => $vocabulary->vid,
+          'name' => $source_term['title'],
+          'description' => $source_term['description'],
+        );
+        drupal_write_record('term_data', $new_term);
+        $tid = db_last_insert_id('term_data', 'tid');
+        $term_hierarchy = array('tid' => $tid, 'parent' => 0);
+        drupal_write_record('term_hierarchy', $term_hierarchy);
+      }
+      else {
+        // Skip the term, there is not a similar vocabulary.
       }
-    }
-    // Create the new term if doesn't exist and know vocabulary
-    if (empty($tid) && !empty($vid)) {
-      $new_term = array(
-        'vid' => $vid,
-        'name' => $source_term['title'],
-        'description' => $source_term['description'],
-      );
-      taxonomy_save_term($new_term);
-      $tid = $new_term['tid'];
     }
 
     // Apply the term to the target node.
@@ -126,6 +160,7 @@ function taxonomy_feeds_atom_rdf_map_alt
  * Implementation of hook_feeds_atom_rdf_map_alter().
  */
 function filefield_feeds_atom_rdf_map_alter(&$target_item, $source_item, FeedsSource $source) {
+
   // For any filefield in the incoming data, check to see if a full URL to the file
   // is specified.  If so, import it outright.
   foreach ($source_item['rdf'] as $field_name => $field) {
@@ -161,6 +196,7 @@ function filefield_feeds_atom_rdf_map_al
  * Implementation of hook_file_delete().
  */
 function feeds_atom_file_delete($file) {
+
   // Clean up our extra tracking information.
   db_query("DELETE FROM {feeds_atom_file_import} WHERE fid = %d", $file->fid);
 }
Index: plugins/FeedsAtomRDFCustomParser.inc
===================================================================
RCS file: plugins/FeedsAtomRDFCustomParser.inc
diff -N plugins/FeedsAtomRDFCustomParser.inc
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ plugins/FeedsAtomRDFCustomParser.inc	3 Feb 2011 10:44:33 -0000
@@ -0,0 +1,112 @@
+<?php
+
+/**
+ * Parses Atom RDF feeds and allows you to define your own mapping for feeds
+ */
+class FeedsAtomRDFCustomParser extends FeedsParser {
+
+  /**
+   * Implementation of FeedsParser::parse().
+   */
+  public function parse(FeedsImportBatch $batch, FeedsSource $source) {
+    require_once './' . drupal_get_path('module','feeds_atom') . '/libraries/atomrdf_parser.inc';
+    $result = atomrdf_parser_parse($batch->getRaw());
+    $batch->title = $result['title'];
+    $batch->description = $result['description'];
+    $batch->link = $result['link'];
+    if (is_array($result['items'])) {
+      $batch->setItems($result['items']);
+    }
+  }
+
+  /**
+   * Get an element identified by $element_key of the given item.
+   * The element key corresponds to the values in the array returned by
+   * FeedsParser::getMappingSources().
+   *
+   * This method is invoked from FeedsProcessor::map() when a concrete item is
+   * processed.
+   *
+   * @ingroup mappingapi
+   *
+   * @param $batch
+   *   FeedsImportBatch object containing the sources to be mapped from.
+   * @param $element_key
+   *   The key identifying the element that should be retrieved from $source
+   *
+   * @return
+   *   The source element from $item identified by $element_key.
+   *
+   * @see FeedsProcessor::map()
+   * @see FeedsCSVParser::getSourceElement().
+   */
+  public function getSourceElement(FeedsImportBatch $batch, $element_key) {
+    if (($node = $batch->feedNode()) && $element_key == 'parent:uid') {
+      return $node->uid;
+    }
+    $item = $batch->currentItem();
+    $fname = substr($element_key,0,6);
+    if ($fname == 'field_') {
+      $type = $item['rdf'][$element_key]['#attributes']['type'];
+      switch ($type) {
+        case 'text':
+          return $item['rdf'][$element_key][0]['value'];
+          break;
+        case 'filefield':
+          return $item['rdf'][$element_key][0]['full_url'];
+          break;
+        case 'email':
+          return $item['rdf'][$element_key][0]['email'];
+          break;
+        case 'nodereference':
+          if ($item['rdf'][$element_key][1]) {
+            $return = array();
+            foreach ($item['rdf'][$element_key] as $elt) {
+              if ($elt['guid']) {
+                $return[] = $elt['guid'];
+              }
+            }
+            return $return;
+          }
+          else {
+            return $item['rdf'][$element_key][0]['guid'];
+          }
+          break;
+        default:
+          if ($item['rdf'][$element_key][0]['value']) {
+            return $item['rdf'][$element_key][0]['value'];
+          }
+          else {
+            return '';
+          }
+      }
+    }
+    elseif (in_array($element_key, array('body', 'created', 'changed', 'uid'))) {
+      if (in_array($element_key, array('created', 'changed'))) {
+        return strtotime($item['rdf'][$element_key]);
+      }
+      elseif ($element_key == 'uid') {
+        $user = user_load(array('mail' => $item['author_email']));
+        return $user->uid;
+      }
+      else {
+        return $item['rdf'][$element_key];
+      }
+    }
+    elseif ($fname == 'taxono') { // Taxonomy
+      // Get vocabulary name
+      $tax_array = explode(':', $element_key);
+      $vocabulary = $tax_array[1];
+      $return_array = array();
+      foreach ($item['rdf']['taxonomy'] as $tag) {
+        if ($tag['vocabulary'] == $vocabulary) {
+          $return_array[] = $tag['label'];
+        }
+      }
+      return $return_array;
+    }
+    else {
+      return isset($item[$element_key]) ? $item[$element_key] : '';
+    }
+  }
+}
