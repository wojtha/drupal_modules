<?php
// $Id$

/**
 * @file
 * Agrovoc Taxonomy Drupal module
 * 
 * Adds Agrovoc functionalities to Drupal's taxonomy. 
 * 
 */

/**
 * Stores the results returned by the call to the agrovoc API.
 */
$_agrovoc_taxonomy_results = '';

/**
 * Implements hook_menu().
 */
function agrovoc_taxonomy_menu() {
  $items = array();
  $items['admin/content/taxonomy/%taxonomy_vocabulary/add/agrovoc'] = array(
    'title' => 'Add terms using Agrovoc',
    'page callback' => 'agrovoc_taxonomy_add_terms_page',
    'page arguments' => array(3),
    'access callback' => 'agrovoc_taxonomy_add_terms_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/content/taxonomy/%taxonomy_vocabulary'
  );
  $items['admin/content/taxonomy/agrovoc_taxonomy/add_term'] = array(
    'title' => 'Add term using Agrovoc',
    'page callback' => 'agrovoc_taxonomy_add_term_page',
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_CALLBACK
  );
  $items['taxonomy/agrovoc_autocomplete'] = array(
    'title' => 'Autocomplete agrovoc taxonomy',
    'page callback' => 'agrovoc_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'agrovoc_taxonomy.pages.inc'
  );
  $items['content_taxonomy/agrovoc_autocomplete'] = array(
    'title' => 'Autocomplete agrovoc taxonomy for content_taxonomy',
    'page callback' => 'agrovoc_taxonomy_content_taxonomy_autocomplete_load',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'agrovoc_taxonomy.pages.inc'
  );
  return $items;
}

/**
 * Access callback to add agrovoc terms to a taxonomy.
 */
function agrovoc_taxonomy_add_terms_access($vocabulary) {
  if ($vocabulary->agrovoc && user_access('administer taxonomy')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Page callback to add agrovoc terms to a taxonomy.
 */
function agrovoc_taxonomy_add_terms_page($vocabulary) {
  global $_agrovoc_taxonomy_results;
  $html = drupal_get_form('agrovoc_taxonomy_form_search', $vocabulary->vid);
  $html .= $_agrovoc_taxonomy_results;
  return $html;
}

/**
 * Search form to search agrovoc terms.
 */
function agrovoc_taxonomy_form_search(&$form_state, $taxonomy_id) {
  $form['term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term searched'),
    '#required' => true
  );
  
  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Search mode'),
    '#options' => array(
      'starting' => 'Starting',
      'containing' => 'Containing',
      'exact' => 'Exact',
      'end with' => 'End with',
      'exact word' => 'Exact word'
    )
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );
  
  if (isset($form_state['storage']['response'])) {
    _agrovoc_taxonomy_set_results($form_state, $taxonomy_id);
  }
  
  return $form;
}

/**
 * Results of the search form.
 */
function _agrovoc_taxonomy_set_results($form_state, $taxonomy_id) {
  global $_agrovoc_taxonomy_results;
  $response = $form_state['storage']['response'];
  $headers = array(t('Id'), t('Term'), t('Language'), '');
  $rows = array();
  foreach ($response as $term) {
    if (_agrovoc_taxonomy_is_in_vocabulary($term['id'], $term['lang'], $taxonomy_id)) {
      $rows[] = array($term['id'], $term['term'], $term['lang'], t('Part of the taxonomy'));
    }
    else {
      $rows[] = array($term['id'], $term['term'], $term['lang'], drupal_get_form('agrovoc_taxonomy_form_add_term', $taxonomy_id, $term['id'], $term['term'], $term['lang']));
    }
  }
  $_agrovoc_taxonomy_results = theme('table', $headers, $rows);
}

/**
 * Submit callback of the search form.
 */
function agrovoc_taxonomy_form_search_submit($form, &$form_state) {
  $response = agrovoc_api_simpleSearchByMode2($form['term']['#value'], $form['mode']['#value']);
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['response'] = $response;
}

/**
 * Page callback to add an Agrovoc term.
 */
function agrovoc_taxonomy_add_term_page() {
  // Get query params
  $vocabulary_id = $_POST['taxonomy_id'];
  $term_id = $_POST['term_id'];
  $term_string = $_POST['term'];
  $lang = $_POST['lang'];
  $op = $_POST['op'];
  $term = array(
    'vid' => $vocabulary_id,
    'name' => $term_string,
    'language' => strtolower($lang)
  );
  taxonomy_save_term($term);
  return drupal_json(array('status' => TRUE, 'data' => t('Part of the taxonomy')));
}

/**
 * Form to add a specific Agrovoc term to a taxonomy.
 */
function agrovoc_taxonomy_form_add_term($form_state, $taxonomy_id, $term_id, $term, $lang) {
  $form['#prefix'] = '<div id="agrovoc_taxonomy_term_form_' . $taxonomy_id . '_' . $term_id . '_' . $lang . '">';
  $form['taxonomy_id'] = array(
    '#type' => 'hidden',
    '#value' => $taxonomy_id
  );
  $form['term_id'] = array(
    '#type' => 'hidden',
    '#value' => $term_id
  );
  $form['term'] = array(
    '#type' => 'hidden',
    '#value' => $term
  );
  $form['lang'] = array(
    '#type' => 'hidden',
    '#value' => $lang
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add term'),
    '#ahah' => array(
      'event' => 'click',
      'path' => 'admin/content/taxonomy/agrovoc_taxonomy/add_term',
      'wrapper' => 'agrovoc_taxonomy_term_form_' . $taxonomy_id . '_' . $term_id . '_' . $lang,
      'method' => 'replace'
    )
  );
  
  $form['#suffix'] = '</div>';
  
  return $form;
}

/**
 * Checks if an Agrovoc term is already part of a vocabulary.
 * 
 * @param $term_id
 *  Agrovoc term id
 * @param $lang
 *  Term language
 * @param $vocabulary_id
 *  Id of the vocabulary in which the check needs to be made
 * 
 * @return
 *  TRUE if the term is already in the vocabulary, FALSE if it isn't
 */
function _agrovoc_taxonomy_is_in_vocabulary($term_id, $lang, $vocabulary_id) {
  $sql = "SELECT vid FROM {agrovoc_taxonomy} WHERE agrovoc_id = '%d' AND agrovoc_lang = '%s'";
  $result = db_query($sql, $term_id, strtoupper($lang));
  $is_in_vocabulary = FALSE;
  while ($vocabulary = db_fetch_object($result)) {
    if ($vocabulary->vid == $vocabulary_id) {
      $is_in_vocabulary = TRUE;
    }
  }
  return $is_in_vocabulary;
}

/**
 * Returns the agrovoc id based on the term id.
 * 
 * @param $tid
 *  Drupal term id
 * 
 * @return
 *  Agrovoc id
 */
function _agrovoc_taxonomy_get_agrovoc_id($tid) {
  $sql = "SELECT agrovoc_id FROM {agrovoc_taxonomy} WHERE tid = '%d'";
  $result = db_query($sql, $tid);
  if ($row = db_fetch_object($result)) {
    return $row->agrovoc_id;
  }
  else {
    return 0;
  }
}

/**
 * Returns the term ids found with the Agrovoc id given as a parameter.
 * 
 * @param $agrovoc_id
 *  Agrovoc id of the term
 * @param $vocabulary_id
 *  Vocabulary id in which the term needs to be searched
 * 
 * @return
 *  Array with the Drupal term ids found; empty array if no terms were found
 */
function _agrovoc_taxonomy_get_term_ids_from_agrovoc_id($agrovoc_id, $vocabulary_id) {
  $sql = "SELECT tid FROM {agrovoc_taxonomy} WHERE agrovoc_id = '%d' AND vid = '%d'";
  $result = db_query($sql, $agrovoc_id, $vocabulary_id);
  $tids = array();
  while ($tid = db_fetch_object($result)) {
    $tids[] = $tid->tid;
  }
  return $tids;
}

/**
 * Returns the term of the Drupal taxonomy based on the Agrovoc id, the term language and the vocabulary id.
 * 
 * @param $agrovoc_id
 *  Agrovoc id
 * @param $language
 *  Term language
 * @param $vocabulary_id
 *  Vocabulary id
 * 
 * @return
 *  The term id if the term was found, 0 otherwise
 */
function agrovoc_taxonomy_get_term_from_agrovoc_id($agrovoc_id, $language, $vocabulary_id) {
  $sql = "SELECT tid FROM {agrovoc_taxonomy} WHERE agrovoc_id = '%d' AND agrovoc_lang = '%s' AND vid = '%d'";
  $result = db_query($sql, $agrovoc_id, strtoupper($language), $vocabulary_id);
  if ($tid = db_fetch_object($result)) {
    return $tid->tid;
  }
  else {
    return 0;
  }
}

/**
 * Implements hook_form_alter().
 */
function agrovoc_taxonomy_form_alter(&$form, &$form_state, $form_id) {
  // Integration with content taxonomy
  if (module_exists('content_taxonomy') && $form['#id'] == 'node-form') {
    $form['#after_build'][] = 'agrovoc_taxonomy_content_taxonomy_autocomplete';
  }
  switch ($form_id) {
    case 'taxonomy_form_term':
      $tid = $form['#term']['tid'];
      $agrovoc_id = _agrovoc_taxonomy_get_agrovoc_id($tid);
      if ($agrovoc_id != 0 && $form['identification']) {
        // Information
        $form['identification']['agrovoc_info'] = array(
          '#value' => t('This term belongs to the Agrovoc thesaurus. As a result, some fields are disabled'),
          '#weight' => -15
        );
        $form['identification']['agrovoc_id'] = array(
          '#value' => t('Agrovoc id: @agrovoc_id', array('@agrovoc_id' => $agrovoc_id)),
        );
        // Disable title field
        $form['identification']['name']['#disabled'] = TRUE;
        $form['identification']['name']['#value'] = $form['identification']['name']['#default_value'];
        // Disable language field if present
        $form['#after_build'][] = 'agrovoc_taxonomy_disable_language';
      }
    break;
    case 'taxonomy_overview_vocabularies':
      $nb_elements = count($form);
      for ($i = 1; $i < $nb_elements; $i++) {
        $vocabulary = taxonomy_vocabulary_load($form[$i]['#vocabulary']['vid']);
        if ($vocabulary->agrovoc) {
          $form[$i]['add_agrovoc'] = array(
            '#value' => l(t('add terms using Agrovoc'), 'admin/content/taxonomy/' . $form[$i]['#vocabulary']['vid'] . '/add/agrovoc')
          );
        }
      }
      break;
    case 'taxonomy_form_vocabulary':
      $vid = $form['vid']['#value'];
      $vocabulary = taxonomy_vocabulary_load($vid);
      $form['settings']['agrovoc'] = array(
        '#type' => 'checkbox',
        '#title' => 'Agrovoc vocabulary',
        '#default_value' => $vocabulary->agrovoc,
        '#description' => 'Whether this vocabulary should allow terms from the Agrovoc thesaurus to be added'
      );
      $form['settings']['agrovoc_containing'] = array(
        '#type' => 'checkbox',
        '#title' => 'Use Containing',
        '#default_value' => $vocabulary->agrovoc_containing,
        '#description' => 'Check this if you would like the autocomplete field to use the containing search mode instead of the default starting search mode'
      );
      $form['settings']['agrovoc_only'] = array(
        '#type' => 'checkbox',
        '#title' => 'Agrovoc only',
        '#default_value' => $vocabulary->agrovoc_only,
        '#description' => 'Whether this vocabulary should ONLY contain terms from the Agrovoc thesaurus'
      );
      $form['settings']['agrovoc_translations'] = array(
        '#type' => 'checkbox',
        '#title' => 'Agrovoc translations',
        '#default_value' => $vocabulary->agrovoc_translations,
        '#description' => 'Whether, when adding an Agrovoc term to this vocabulary, translations of the term should also be fetched'
      );
      break;
  }
  // Changing autocomplete path
  if ($form['taxonomy']['tags']) {
    foreach ($form['taxonomy']['tags'] as $vid => &$voc) {
      // Load vocabulary
      $vocabulary = taxonomy_vocabulary_load($vid);
      if ($vocabulary->agrovoc) {
        $voc['#autocomplete_path'] = 'taxonomy/agrovoc_autocomplete/' . $vid;
      }
    }
  }
}

/**
 * Disable language field on terms that are part of the Agrovoc thesaurus.
 */
function agrovoc_taxonomy_disable_language($form, $form_values) {
  if ($form['identification']['language']) {
    $form['identification']['language']['#value'] = $form['identification']['language']['#default_value'];
    $form['identification']['language']['#disabled'] = TRUE;
    $form['identification']['language']['#attributes'] = array('disabled' => 'disabled');
  }
  return $form;
}

/**
 * Redirects the autocomplete path of an autocomplete field handled by content taxonomy to an agrovoc enabled autocomplete function.
 */
function agrovoc_taxonomy_content_taxonomy_autocomplete($form, $form_values) {
  $content_taxonomy_fields = array();
  foreach ($form as $key => $item) {
    if (is_array($item) && $item['#type'] == 'content_taxonomy_autocomplete') {
      $content_taxonomy_fields[] = $key;
    }
  }
  $content_type_info = _content_type_info();
  foreach ($content_taxonomy_fields as $key) {
    // First, make sure the vocabulary linked to the field is agrovoc enabled
    $vid = $content_type_info['fields'][$key]['vid'];
    $vocabulary = taxonomy_vocabulary_load($vid);
    // If it is, do the redirections
    if ($vocabulary->agrovoc) {
      $form[$key]['#autocomplete_path'] = 'content_taxonomy/agrovoc_autocomplete/' . $key;
      $form[$key]['value']['#autocomplete_path'] = 'content_taxonomy/agrovoc_autocomplete/' . $key;
    }
  }
  return $form;
}

/**
 * Implements hook_nodeapi().
 */
function agrovoc_taxonomy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'validate':
      if (!empty($node->taxonomy)) {
        agrovoc_taxonomy_taxonomy_validate($node);
      }
      break;
  }
}

/**
 * Validates the taxonomy by making sure, if there is an Agrovoc vocabulary, that the added terms are from the Agrovoc.
 */
function agrovoc_taxonomy_taxonomy_validate(&$node) {
  $terms = $node->taxonomy;
  if (!empty($terms['tags'])) {
    foreach ($terms['tags'] as $vid => $vid_value) {
      $vocabulary = taxonomy_vocabulary_load($vid);
      if ($vocabulary->agrovoc && $vocabulary->agrovoc_only) { // If the vocabulary only allows agrovoc terms
        $ag_terms = explode(',', $vid_value);
        foreach ($ag_terms as $ag_term) {
          $matching_terms = taxonomy_get_term_by_name(trim($ag_term));
          // If the term is already in the taxonomy, that's fine
          // But if the term is not already in the taxonomy, we need to check that it is part of the Agrovoc
          if (count($matching_terms) == 0) {
            // Check that the term is part of the Agrovoc
            if (agrovoc_api_isAgrovocTerm(trim($ag_term)) == FALSE) {
              form_set_error("taxonomy][tags][$vid", t('The term %term is not part of the Agrovoc thesaurus and can not be added', array('%term' => $ag_term)));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_taxonomy().
 */
function agrovoc_taxonomy_taxonomy($op, $type, $item) {
  global $language;
  if ($type == 'term') {
    switch ($op) {
      case 'delete':
        $tid = $item['tid'];
        // Delete it from the agrovoc_taxonomy table
        $sql = "DELETE FROM {agrovoc_taxonomy} WHERE tid = '%d'";
        db_query($sql, $tid);
        break;
      // When inserting a term, if the term is part of an Agrovoc vocabulary, associate it to the Agrovoc id
      case 'insert':
        // Get new term id
        $vocabulary = taxonomy_vocabulary_load($item['vid']);
        if ($vocabulary->agrovoc) {
          $term_language = $item['language'] ? $item['language'] : $language->language;
          // Set a language for the term that was just added
          if (!$item['language']) {
            $item['language'] = $term_language;
            taxonomy_save_term($item);
          }
          // Look for the term id
          $response = agrovoc_api_simpleSearchByMode2($item['name'], 'starting', ',', TRUE, 0, $term_language);
          if (count($response)) { // Term is part of the agrovoc
            $agrovoc_id = $response[0]['id'];
            $record = array(
              'tid' => $item['tid'],
              'vid' => $item['vid'],
              'agrovoc_id' => $agrovoc_id,
              'agrovoc_lang' => strtoupper($term_language)
            );
            drupal_write_record('agrovoc_taxonomy', $record);
            // Handle translations: maybe the term we just added is a translation of another term already present in the taxonomy
            $base_tids = _agrovoc_taxonomy_get_term_ids_from_agrovoc_id($agrovoc_id, $item['vid']);
            $base_terms = array();
            $terms = array();
            if (count($base_tids)) {
              // Yes, it's a translation of an existing term, we need to update the translation in the DB
              // First, fetch all the base terms in the DB
              foreach ($base_tids as $base_tid) {
                $base_terms[] = taxonomy_get_term($base_tid);
              }
              // Has it already been translated ?
              $base_term = $base_terms[0];
              $trid = 0;
              if ($base_term->trid != 0) {
                $trid = $base_term->trid;
              }
              // Prepare the call to i18ntaxonomy_translation_save
              foreach ($base_terms as $base_term) {
                $base_term_language = $base_term->language;
                $terms[$base_term_language] = $base_term; // The base term
              }
              $terms[$term_language] = taxonomy_get_term($item['tid']); // The term we just added
              // Load file
              module_load_include('inc', 'i18ntaxonomy', 'i18ntaxonomy.admin');
              // Save the translation
              i18ntaxonomy_translation_save($terms, $trid);
            }
            if ($vocabulary->agrovoc_translations) {
              // Add translations of the term
              // Get all translations of the term
              $translations = agrovoc_api_getAllLabelsByTermcode2($agrovoc_id);
              // Get supported languages of the platform
              $supported_languages = i18n_supported_languages();
              $supported_languages = array_keys($supported_languages);
              // Get term languages that are already present in the database
              $terms_languages = array_keys($terms);
              foreach ($translations as $l => $t) {
                // If the language is part of the supported languages and is not already present in the database
                if (in_array(strtolower($l), $supported_languages) && !in_array(strtolower($l), $terms_languages)) {
                  // Add the term in the taxonomy
                  // Create term
                  $term = array(
                    'vid' => $item['vid'],
                    'name' => $t,
                    'language' => strtolower($l)
                  );
                  taxonomy_save_term($term);
                  // Get out of the loop after we have added the first term. The other terms will be added recursively by the call to taxonomy_save_term
                  break;
                }
              }
            }
          }
        }
        break;
    }
  }
}

/**
 * Theme the vocabulary overview as a sortable list of vocabularies. Taken from the taxonomy module
 *
 * @ingroup themeable
 * @see taxonomy_overview_vocabularies()
 */
function theme_agrovoc_taxonomy_overview_vocabularies($form) {
  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      $vocabulary = &$form[$key];

      $row = array();
      $row[] = drupal_render($vocabulary['name']);
      $row[] = drupal_render($vocabulary['types']);
      if (isset($vocabulary['weight'])) {
        $vocabulary['weight']['#attributes']['class'] = 'vocabulary-weight';
        $row[] = drupal_render($vocabulary['weight']);
      }
      $row[] = drupal_render($vocabulary['edit']);
      $row[] = drupal_render($vocabulary['list']);
      $row[] = drupal_render($vocabulary['add']);
      $row[] = drupal_render($vocabulary['add_agrovoc']);
      $rows[] = array('data' => $row, 'class' => 'draggable');
    }
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No vocabularies available.'), 'colspan' => '5'));
  }

  $header = array(t('Name'), t('Type'));
  if (isset($form['submit'])) {
    $header[] = t('Weight');
    drupal_add_tabledrag('taxonomy', 'order', 'sibling', 'vocabulary-weight');
  }
  $header[] = array('data' => t('Operations'), 'colspan' => '3');
  return theme('table', $header, $rows, array('id' => 'taxonomy')) . drupal_render($form);
}

/**
 * Implements hook_theme_registry_alter().
 */
function agrovoc_taxonomy_theme_registry_alter(&$theme_registry) {
  $theme_registry['taxonomy_overview_vocabularies']['function'] = 'theme_agrovoc_taxonomy_overview_vocabularies';
}
