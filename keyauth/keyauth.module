<?php

// Time in seconds that a request is valid.
define('KEYAUTH_EXPIRY', 30);
// Hash algorithm to use.
define('KEYAUTH_ALGORITHM', 'sha1');

/**
 * Implementation of hook_cron().
 *
 * Clear old values from the nonce table.
 */
function keyauth_cron() {
  $expiry_time = time() - KEYAUTH_EXPIRY;
  db_query("DELETE FROM {keyauth_timestamp_nonce} WHERE timestamp < '%s'", $expiry_time);
}

/**
 * Implementation of hook_menu().
 */
function keyauth_menu() {
  $items = array();
  $items['admin/build/keys'] = array(
    'title'             => 'Authentication keys',
    'description'       => 'Manage authentication keys.',
    'page callback'     => 'keyauth_admin_keys_list',
    'access arguments'   => array('administer authentication keys'),
    'file'              => 'keyauth.admin.inc',
  );
  $items['admin/build/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/%/delete'] = array(
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_delete_confirm', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/%/generate'] = array(
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_generate_confirm', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/list'] = array(
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'access arguments'   => array('administer authentication keys'),
    'weight'            => -10,
  );
  $items['admin/build/keys/new'] = array(
    'title'             => 'New key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'access arguments'   => array('administer authentication keys'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'keyauth.admin.inc',
  );
  $items['admin/build/keys/add'] = array(
    'title'             => 'Add existing key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'access arguments'   => array('administer authentication keys'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'keyauth.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function keyauth_perm() {
  return array('administer authentication keys');
}

/**
 * Implementation of hook_feed_plugins().
 */
function keyauth_feeds_plugins() {
  $info = array();
  $info['KeyAuthHTTPFetcher'] = array(
    'name' => 'HTTP KeyAuth Fetcher',
    'description' => 'Download content with a signed URL.',
    'help' => 'Uses a message authentication method to authenticate requests to remote resources.',
    'handler' => array(
      'parent' => 'FeedsHTTPFetcher', // This is the key name, not the class name.
      'class' => 'KeyAuthHTTPFetcher',
      'file' => 'KeyAuthHTTPFetcher.inc',
      'path' => drupal_get_path('module', 'keyauth'),
    ),
  );
  return $info;
}

/**
 * Include key auth functions.
 */
function keyauth_include() {
  module_load_include('inc', 'keyauth');
}
